{
  "openapi": "3.0.1",
  "info": {
    "title": "Area API documentation",
    "description": "## This is the documentation of the Area dashboard API.\n### All endpoints use the same base data scheme as response, **even for non-successful HTTP status codes** (see `Status`).",
    "version": "1.0.0"
  },
  "paths": {
    "/api/auth/token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign-in to a user's account",
        "description": "## Get a pair of access and refresh tokens, allowing access a user's account",
        "requestBody": {
          "description": "The user's credentials",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SignIn"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignIn"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SignIn"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SignIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<UserToken>"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Bearer token, identifier or password"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh access tokens",
        "description": "## Get a new pair of access and refresh tokens from a previous refresh token",
        "requestBody": {
          "description": "The refresh_token obtained from a previous call to `/api/auth/token` or `/api/auth/refresh`",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<UserToken>"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/auth/code": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Exchange authentication code",
        "description": "Exchange an authentication code obtained from one of the external sign-in services endpoints, and receive access and refresh tokens",
        "requestBody": {
          "description": "Authentication code obtained from one of the external sign-in services endpoints, along with the id and secret of the client",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangeCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangeCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangeCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangeCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<UserToken>"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/auth/facebook": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign-in/register with Facebook",
        "description": "Redirect the user to this endpoint to let them sign-in/register with Facebook. The user will be redirected back to the client with an authentication code once done.",
        "requestBody": {
          "description": "Mandatory information to be able to redirect the url back to the client once the operation is done",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          },
          "302": {
            "description": "Redirection to Facebook's sign-in page"
          }
        }
      }
    },
    "/api/auth/google": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign-in/register with Google",
        "description": "Redirect the user to this endpoint to let them sign-in/register with Google. The user will be redirected back to the client with an authentication code once done.",
        "requestBody": {
          "description": "Mandatory information to be able to redirect the url back to the client once the operation is done",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          },
          "302": {
            "description": "Redirection to Google's sign-in page"
          }
        }
      }
    },
    "/api/about": {
      "get": {
        "tags": [
          "Others"
        ],
        "summary": "General information about the API's content",
        "description": "## Get general information about the API's content",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<AboutDotJson>"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/services": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "List all services",
        "description": "## Get a list of all services available",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<List<Service>>"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/services/me": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "List a user's services",
        "description": "## Get a list of all services where a user is subscribed to some of its widget(s)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<List<Service>>"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/services/{serviceId}": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Get a service",
        "description": "## Get a information about a service in particular",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<Service>"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          },
          "404": {
            "description": "The service does not exist"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Sign-in a user to a service",
        "description": "## Sign-in the user to a service.\n## If the service doesn't have sign-in capabilities, an empty success response is returned (a.k.a without `data`).\n## Otherwise an authentication URL is returned as `data` to redirect the user to",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service's ID",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Services"
        ],
        "summary": "Sign-out a user from a service",
        "description": "## Sign-out the user from a service. If the service doesn't have sign-in capabilities, an empty success response is returned (a.k.a. without `data`)",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service's ID",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register a user",
        "description": "## Create a new user account",
        "requestBody": {
          "description": "The user's information. The password must be at least 8 characters long, with and without capitals, with numerical and special characters. The username must start with a letter, numeric characters and some special characters (._-) are accepted",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Register"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Malformed body, incorrect username/email format, password too weak"
          },
          "500": {
            "description": "Server Error"
          },
          "409": {
            "description": "Username or email already in use"
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get the current user's information",
        "description": "## Get information about the current user associated to the bearer token used for the request",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<UserInformation>"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "## Delete a user's account",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "description": "Not allowed to delete the desired user"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/users/me/devices": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's known devices",
        "description": "## Get a list of devices associated to the user's account",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<UserDevices>"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/users/me/devices/{deviceId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Forget a user's device",
        "description": "## Forget a user's device and revoke the access and refresh tokens created from this device",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "Device's ID",
            "required": true,
            "schema": {
              "maximum": 4294967295,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          },
          "404": {
            "description": "Invalid deviceId"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/widgets": {
      "get": {
        "tags": [
          "Widgets"
        ],
        "summary": "List all widgets",
        "description": "## List all widgets. Optionally, you can get the widgets from one particular service. **The values of the parameters (`params`) are the widgets' default ones**",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "description": "A service's ID, to filter the results by.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<List<Widget>>"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          },
          "404": {
            "description": "The `serviceId` doesn't have a correspond service"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/widgets/me": {
      "get": {
        "tags": [
          "Widgets"
        ],
        "summary": "List a user's widgets",
        "description": "List the user's widgets. Optionally, you can get the widgets from one particular service. **The values of the parameters (`params`) are the ones the user has previously used in call to `/api/widgets/{widgetId}`**",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "description": "A service's ID, to filter the results by.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<List<Widget>>"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          },
          "404": {
            "description": "The `serviceId` doesn't have a correspond service"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/widgets/{widgetId}": {
      "get": {
        "tags": [
          "Widgets"
        ],
        "summary": "Call a widget",
        "description": "## Call the widget's corresponding API.\n## The query parameters will be used to override/complete the widget's `params` values, i.e.:**`paramName`=`value`**.\n## The API's request result is interpolated into a its corresponding data scheme (inheriting from `WidgetCallResponse`) and returned",
        "parameters": [
          {
            "name": "widgetId",
            "in": "path",
            "description": "The widget's ID",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response<WidgetCallResponse>"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          },
          "404": {
            "description": "The widget doesn't exist"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Widgets"
        ],
        "summary": "Unsubscribe the user to a widget",
        "description": "## Remove a widget to the user's subscriptions",
        "parameters": [
          {
            "name": "widgetId",
            "in": "path",
            "description": "The widget's ID",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          },
          "404": {
            "description": "The widget doesn't exist or the user isn't subscribed to it"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Widgets"
        ],
        "summary": "Subscribe the user to a widget",
        "description": "## Add a widget to the user's subscriptions",
        "parameters": [
          {
            "name": "widgetId",
            "in": "path",
            "description": "The widget's ID",
            "required": true,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Server Error"
          },
          "404": {
            "description": "The widget doesn't exist"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "SignIn": {
        "required": [
          "identifier",
          "password"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Username or email"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        },
        "additionalProperties": false
      },
      "UserToken": {
        "required": [
          "access_token",
          "expires_in",
          "refresh_token"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Bearer token to access the account"
          },
          "expires_in": {
            "type": "integer",
            "description": "Lifetime in seconds of the access token",
            "format": "int64"
          },
          "refresh_token": {
            "type": "string",
            "description": "Token to get a new pair of tokens"
          }
        },
        "additionalProperties": false
      },
      "Response<UserToken>": {
        "required": [
          "successful"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserToken"
          },
          "error": {
            "type": "string",
            "description": "Message describing the error if any"
          },
          "successful": {
            "type": "boolean",
            "description": "State of the request (failed or successful)"
          }
        },
        "additionalProperties": false
      },
      "RefreshToken": {
        "required": [
          "refresh_token"
        ],
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "Token to get a new pair of tokens"
          }
        },
        "additionalProperties": false
      },
      "ExchangeCode": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Authentication code to be exchanged for a pair of access and refresh token"
          }
        },
        "additionalProperties": false
      },
      "ExternalAuth": {
        "required": [
          "redirect_url"
        ],
        "type": "object",
        "properties": {
          "redirect_url": {
            "type": "string",
            "description": "The URL to redirect the user to once the operation is completed"
          },
          "state": {
            "type": "string",
            "description": "A freely-defined value that will sent back to the client",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AboutDotJson.Widget": {
        "required": [
          "description",
          "id",
          "name",
          "requires_auth"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Widget's ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Widget's name"
          },
          "description": {
            "type": "string",
            "description": "Widget's description"
          },
          "requires_auth": {
            "type": "boolean",
            "description": "Indicates if authentication to the parent service is required in order to use the widget"
          }
        },
        "additionalProperties": false
      },
      "AboutDotJson.Service": {
        "required": [
          "id",
          "name",
          "widgets"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Service's ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Service's name"
          },
          "widgets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AboutDotJson.Widget"
            },
            "description": "List of widgets in the service"
          }
        },
        "additionalProperties": false
      },
      "AboutDotJson": {
        "required": [
          "services"
        ],
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AboutDotJson.Service"
            },
            "description": "List of all available services"
          }
        },
        "additionalProperties": false
      },
      "Response<AboutDotJson>": {
        "required": [
          "successful"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AboutDotJson"
          },
          "error": {
            "type": "string",
            "description": "Message describing the error if any"
          },
          "successful": {
            "type": "boolean",
            "description": "State of the request (failed or successful)"
          }
        },
        "additionalProperties": false
      },
      "Service": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Service's ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Service's name"
          }
        },
        "additionalProperties": false
      },
      "Response<List<Service>>": {
        "required": [
          "successful"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "error": {
            "type": "string",
            "description": "Message describing the error if any"
          },
          "successful": {
            "type": "boolean",
            "description": "State of the request (failed or successful)"
          }
        },
        "additionalProperties": false
      },
      "Response<Service>": {
        "required": [
          "successful"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Service"
          },
          "error": {
            "type": "string",
            "description": "Message describing the error if any"
          },
          "successful": {
            "type": "boolean",
            "description": "State of the request (failed or successful)"
          }
        },
        "additionalProperties": false
      },
      "Status": {
        "required": [
          "successful"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Message describing the error if any"
          },
          "successful": {
            "type": "boolean",
            "description": "State of the request (failed or successful)"
          }
        },
        "additionalProperties": false
      },
      "Register": {
        "required": [
          "email",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's username"
          },
          "password": {
            "type": "string",
            "description": "The user's password"
          },
          "email": {
            "type": "string",
            "description": "The user's email address"
          }
        },
        "additionalProperties": false
      },
      "UserInformation": {
        "required": [
          "email",
          "id",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The user's ID",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "description": "The user's username"
          },
          "email": {
            "type": "string",
            "description": "The user's email"
          }
        },
        "additionalProperties": false
      },
      "Response<UserInformation>": {
        "required": [
          "successful"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserInformation"
          },
          "error": {
            "type": "string",
            "description": "Message describing the error if any"
          },
          "successful": {
            "type": "boolean",
            "description": "State of the request (failed or successful)"
          }
        },
        "additionalProperties": false
      },
      "Device": {
        "enum": [
          "Unknown",
          "Desktop",
          "Tablet",
          "Mobile",
          "Watch",
          "Tv",
          "Console",
          "Car",
          "IoT"
        ],
        "type": "string"
      },
      "Browser": {
        "enum": [
          "Unknown",
          "Chrome",
          "InternetExplorer",
          "Safari",
          "Firefox",
          "Edge",
          "Opera",
          "Others"
        ],
        "type": "string"
      },
      "Platform": {
        "enum": [
          "Unknown",
          "Windows",
          "Mac",
          "iOS",
          "Linux",
          "Android",
          "Others"
        ],
        "type": "string"
      },
      "Processor": {
        "enum": [
          "ARM",
          "x64",
          "x86",
          "Others"
        ],
        "type": "string"
      },
      "UserDevice": {
        "required": [
          "architecture",
          "browser",
          "browser_version",
          "country",
          "device",
          "id",
          "last_used",
          "os",
          "os_version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Device's Id",
            "format": "int32"
          },
          "last_used": {
            "type": "integer",
            "description": "Date (seconds since EPOCH) at which the device was last used",
            "format": "int64"
          },
          "country": {
            "type": "string",
            "description": "The country associated to the device"
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "browser": {
            "$ref": "#/components/schemas/Browser"
          },
          "browser_version": {
            "type": "string",
            "description": "Browser's version"
          },
          "os": {
            "$ref": "#/components/schemas/Platform"
          },
          "os_version": {
            "type": "string",
            "description": "Operating system's version"
          },
          "architecture": {
            "$ref": "#/components/schemas/Processor"
          }
        },
        "additionalProperties": false
      },
      "UserDevices": {
        "required": [
          "current_device",
          "devices"
        ],
        "type": "object",
        "properties": {
          "current_device": {
            "type": "integer",
            "description": "Id of the device used for this request",
            "format": "int32"
          },
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDevice"
            },
            "description": "List of devices associated to the user"
          }
        },
        "additionalProperties": false
      },
      "Response<UserDevices>": {
        "required": [
          "successful"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserDevices"
          },
          "error": {
            "type": "string",
            "description": "Message describing the error if any"
          },
          "successful": {
            "type": "boolean",
            "description": "State of the request (failed or successful)"
          }
        },
        "additionalProperties": false
      },
      "ParamType": {
        "enum": [
          "string",
          "integer",
          "boolean",
          "enum"
        ],
        "type": "string"
      },
      "EnumValue": {
        "required": [
          "display_name",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value to send in a widget call"
          },
          "display_name": {
            "type": "string",
            "description": "Human readable name of the value"
          }
        },
        "additionalProperties": false
      },
      "Param": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Parameter's name"
          },
          "type": {
            "$ref": "#/components/schemas/ParamType"
          },
          "value": {
            "type": "string",
            "description": "Parameter's default value"
          },
          "allowed_values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumValue"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Widget": {
        "required": [
          "description",
          "frequency",
          "id",
          "name",
          "params",
          "requires_auth",
          "service"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Widget's ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Widget's name"
          },
          "description": {
            "type": "string",
            "description": "Widget's description"
          },
          "requires_auth": {
            "type": "boolean",
            "description": "Indicates if authentication to the parent service is required in order to use the widget"
          },
          "frequency": {
            "type": "integer",
            "description": "Recommended frequency (in seconds) at which to call the widget. Zero means refreshing is unnecessary",
            "format": "int32"
          },
          "service": {
            "$ref": "#/components/schemas/Service"
          },
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Param"
            },
            "description": "Widget's call parameters"
          }
        },
        "additionalProperties": false
      },
      "Response<List<Widget>>": {
        "required": [
          "successful"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Widget"
            }
          },
          "error": {
            "type": "string",
            "description": "Message describing the error if any"
          },
          "successful": {
            "type": "boolean",
            "description": "State of the request (failed or successful)"
          }
        },
        "additionalProperties": false
      },
      "NewsApiArticle": {
        "required": [
          "author",
          "description",
          "source"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetCallResponseItem"
          }
        ],
        "properties": {
          "source": {
            "type": "string",
            "description": "The source of the article"
          },
          "author": {
            "type": "string",
            "description": "The author of the article"
          },
          "description": {
            "type": "string",
            "description": "The description of the content"
          },
          "published_at": {
            "type": "integer",
            "description": "The date publishing (epoch) of the article",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "## This is the response model for all the widgets of the NewsApi service"
      },
      "SpotifyTrack": {
        "required": [
          "artists",
          "popularity",
          "preview"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetCallResponseItem"
          }
        ],
        "properties": {
          "artists": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The artists who collaborated on making the track"
          },
          "popularity": {
            "type": "integer",
            "description": "The popularity rank of the song",
            "format": "int32"
          },
          "preview": {
            "type": "string",
            "description": "A link to a preview of the track"
          }
        },
        "additionalProperties": false,
        "description": "## This is the response model for the following widgets of the Spotify service:\n- Favorite tracks\n- History"
      },
      "SpotifyArtist": {
        "required": [
          "followers",
          "genres",
          "popularity"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/WidgetCallResponseItem"
          }
        ],
        "properties": {
          "followers": {
            "type": "integer",
            "description": "The amount of followers the artist has",
            "format": "int32"
          },
          "genres": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The genres of music the artist makes"
          },
          "popularity": {
            "type": "integer",
            "description": "The popularity rank of the artist",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "## This is the response model for the \"Favorite artists\" widget of the Spotify service"
      },
      "WidgetCallResponseItem": {
        "type": "object",
        "properties": {
          "header": {
            "type": "string",
            "description": "A header/title"
          },
          "content": {
            "type": "string",
            "description": "The content/description"
          },
          "link": {
            "type": "string",
            "description": "A redirect link for the user"
          },
          "image": {
            "type": "string",
            "description": "A link to an image"
          }
        },
        "additionalProperties": false,
        "description": "Base (generic) interpolation scheme for a widget's invocation result item. At least one of the field must be defined. This scheme can be extended depending on the widget"
      },
      "WidgetCallResponse": {
        "required": [
          "params"
        ],
        "type": "object",
        "properties": {
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Param"
            },
            "description": "List of parameters used for the request",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/WidgetCallResponseItem"
                },
                {
                  "$ref": "#/components/schemas/NewsApiArticle"
                },
                {
                  "$ref": "#/components/schemas/SpotifyTrack"
                },
                {
                  "$ref": "#/components/schemas/SpotifyArtist"
                }
              ],
              "description": "Base (generic) interpolation scheme for a widget's invocation result item. At least one of the field must be defined. This scheme can be extended depending on the widget"
            },
            "description": "The result of the widget's invocation, if enumerable"
          },
          "item": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/WidgetCallResponseItem"
              },
              {
                "$ref": "#/components/schemas/NewsApiArticle"
              },
              {
                "$ref": "#/components/schemas/SpotifyTrack"
              },
              {
                "$ref": "#/components/schemas/SpotifyArtist"
              }
            ],
            "description": "The result of the widget's invocation, if singular"
          }
        },
        "additionalProperties": false
      },
      "Response<WidgetCallResponse>": {
        "required": [
          "successful"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WidgetCallResponse"
          },
          "error": {
            "type": "string",
            "description": "Message describing the error if any"
          },
          "successful": {
            "type": "boolean",
            "description": "State of the request (failed or successful)"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme",
        "scheme": "bearer",
        "bearerFormat": "Jwt"
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication-related endpoints"
    },
    {
      "name": "Others",
      "description": "Other informational endpoints"
    },
    {
      "name": "Services",
      "description": "Service-related endpoints"
    },
    {
      "name": "Users",
      "description": "User-related endpoints"
    },
    {
      "name": "Widgets",
      "description": "Widget-related endpoints"
    }
  ]
}