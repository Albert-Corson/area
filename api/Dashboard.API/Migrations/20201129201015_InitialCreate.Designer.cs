// <auto-generated />
using System;
using Dashboard.API.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Dashboard.API.Migrations
{
    [DbContext(typeof(DatabaseRepository))]
    [Migration("20201129201015_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Dashboard.API.Models.Table.ManyToMany.UserServiceModel", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("UsersToServices");
                });

            modelBuilder.Entity("Dashboard.API.Models.Table.ManyToMany.UserWidgetModel", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("WidgetId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "WidgetId");

                    b.HasIndex("WidgetId");

                    b.ToTable("UsersToWidgets");
                });

            modelBuilder.Entity("Dashboard.API.Models.Table.ServiceModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Dashboard.API.Models.Table.UserModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Dashboard.API.Models.Table.WidgetModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool?>("RequiresAuth")
                        .HasColumnType("boolean");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Widgets");
                });

            modelBuilder.Entity("Dashboard.API.Models.Table.ManyToMany.UserServiceModel", b =>
                {
                    b.HasOne("Dashboard.API.Models.Table.ServiceModel", "Service")
                        .WithMany("Users")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dashboard.API.Models.Table.UserModel", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dashboard.API.Models.Table.ManyToMany.UserWidgetModel", b =>
                {
                    b.HasOne("Dashboard.API.Models.Table.UserModel", "User")
                        .WithMany("Widgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dashboard.API.Models.Table.WidgetModel", "Widget")
                        .WithMany("Users")
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("Dashboard.API.Models.Table.UserModel", b =>
                {
                    b.OwnsMany("Dashboard.API.Models.Table.Owned.WidgetParamModel", "WidgetParams", b1 =>
                        {
                            b1.Property<int>("UserModelId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .UseIdentityByDefaultColumn();

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("UserModelId", "Id");

                            b1.ToTable("Users_WidgetParams");

                            b1.WithOwner()
                                .HasForeignKey("UserModelId");
                        });

                    b.Navigation("WidgetParams");
                });

            modelBuilder.Entity("Dashboard.API.Models.Table.WidgetModel", b =>
                {
                    b.HasOne("Dashboard.API.Models.Table.ServiceModel", "Service")
                        .WithMany("Widgets")
                        .HasForeignKey("ServiceId");

                    b.OwnsMany("Dashboard.API.Models.Table.Owned.WidgetParamModel", "DefaultParams", b1 =>
                        {
                            b1.Property<int>("WidgetModelId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .UseIdentityByDefaultColumn();

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("WidgetModelId", "Id");

                            b1.ToTable("Widgets_DefaultParams");

                            b1.WithOwner()
                                .HasForeignKey("WidgetModelId");
                        });

                    b.Navigation("DefaultParams");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Dashboard.API.Models.Table.ServiceModel", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("Widgets");
                });

            modelBuilder.Entity("Dashboard.API.Models.Table.UserModel", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("Widgets");
                });

            modelBuilder.Entity("Dashboard.API.Models.Table.WidgetModel", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
